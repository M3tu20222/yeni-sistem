import { NextResponse } from 'next/server';
import { NextRequest } from 'next/server';
import jwt from 'jsonwebtoken';

interface DecodedToken {
  id: string;
  username: string;
  role: string;
}

export function authMiddleware(handler: (req: NextRequest) => Promise<NextResponse>) {
  return async (req: NextRequest) => {
    const authHeader = req.headers.get('Authorization');

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return new NextResponse(
        JSON.stringify({ error: 'ğŸš« Yetkisiz eriÅŸim: Token bulunamadÄ±' }),
        { status: 401, headers: { 'Content-Type': 'application/json' } }
      );
    }

    const token = authHeader.split(' ')[1];

    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET!) as DecodedToken;
      
      // KullanÄ±cÄ± bilgilerini request nesnesine ekle
      (req as any).user = decoded;

      // Orijinal handler'Ä± Ã§aÄŸÄ±r
      return handler(req);
    } catch (error) {
      console.error('Token doÄŸrulama hatasÄ±:', error);
      return new NextResponse(
        JSON.stringify({ error: 'ğŸ”’ GeÃ§ersiz veya sÃ¼resi dolmuÅŸ token' }),
        { status: 403, headers: { 'Content-Type': 'application/json' } }
      );
    }
  };
}

// SÃ¼per admin kontrolÃ¼ iÃ§in yardÄ±mcÄ± fonksiyon
export function isSuperAdmin(handler: (req: NextRequest) => Promise<NextResponse>) {
  return authMiddleware(async (req: NextRequest) => {
    const user = (req as any).user;
    
    if (user.role !== 'super') {
      return new NextResponse(
        JSON.stringify({ error: 'âš¡ Yetersiz yetki: Sadece sÃ¼per adminler eriÅŸebilir' }),
        { status: 403, headers: { 'Content-Type': 'application/json' } }
      );
    }
    
    return handler(req);
  });
}

